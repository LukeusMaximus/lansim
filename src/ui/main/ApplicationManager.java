/*
 * ApplicationManager.java
 *
 * Copyright (C) 2008 AppleGrew
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 */
package ui.main;

import java.awt.event.ActionEvent;
import java.awt.event.ComponentEvent;
import java.awt.event.ComponentListener;
import java.awt.event.MouseAdapter;
import java.awt.event.ActionListener;

import javax.swing.ImageIcon;
import javax.swing.JButton;

import ui.Mode;
import ui.ManagerUI;
import util.MiscFunctions;

import java.io.File;
import java.io.FilenameFilter;

/**
 * This is the starting point of the application. It is mainly entrusted with
 * the task of responding to events generated by MainWindow
 * 
 * @author Nirupam
 * @author Rohit
 */
public class ApplicationManager extends MouseAdapter implements ActionListener,
        ComponentListener {
    MainWindow mainWin;
    static ApplicationManager application = null;

    // private static int newCount;

    /**
     * Main is here. The application starts here.
     * 
     * @param args
     */
    public static void main(String[] args) {
        application = new ApplicationManager();
        application.startApp();
    }

    /**
     * Initializes the application by doing stuffs that are needed to be done
     * only at startup.
     * 
     */
    public void startApp() {
        mainWin = new MainWindow();
        loadModules(mainWin);
        Config.setLookNFeel();

        // Making the main windows visible.
        mainWin.makeAppVisible();
        mainWin.addNewClientSpace("ManagerUI");
        ManagerUI m = mainWin.clientSpace.get(0);
        // m.startthread();
    }

    private void loadModules(MainWindow mainWin) {
        // String componentPathName;
        File modDir = new File(Config.moduleDirPath);
        // Loader loader=new Loader();
        String[] nameArr;
        // JButton newButton;
        // Class newClass;
        try {
            nameArr = modDir.list(new FilenameFilter() {
                public boolean accept(File dir, String name) {
                    if (name.contains("."))
                        return false;
                    else
                        return true;
                }
            });
        } catch (NullPointerException e) {
            System.out.print("No modules found");
            return;
        }
        mainWin.ComponentsName = nameArr;
        mainWin.cmdComponents = new JButton[mainWin.ComponentsName.length];
        mainWin.ComponentModulePath = new String[mainWin.ComponentsName.length];

        for (int i = 0; i < mainWin.ComponentsName.length; i++) {
            try {
                // componentPathName=("module/"+mainWin.ComponentsName[i]+"/"+mainWin.ComponentsName[i]+"Button.class");
                // newClass=(loader.load(componentPathName));
                // Object obj=newClass.newInstance();
                // mainWin.cmdComponents[i] = buffer.Startup.button;
                // buffer.Startup.button = null;
                String componentPathName = "module/"
                        + mainWin.ComponentsName[i] + "/"
                        + mainWin.ComponentsName[i] + "Button.class";
                String className = MiscFunctions
                        .convertPath2className(componentPathName);
                mainWin.cmdComponents[i] = (JButton) Class.forName(className)
                        .newInstance();
            } catch (Exception e) {
                System.out.print(e.getMessage() + ": ");
                System.out.println(mainWin.ComponentsName[i]
                        + " Button not found using deafult one.");
                mainWin.cmdComponents[i] = null;
            }
            mainWin.ComponentModulePath[i] = "module/"
                    + mainWin.ComponentsName[i] + "/"
                    + mainWin.ComponentsName[i] + "Mod.class";

        }
    }

    public void actionPerformed(ActionEvent e) {
        Object src = e.getSource();

        if (src.equals(mainWin.cmdRun)) {
            mainWin.cmdPause.setSelected(false);
            if (mainWin.cmdRun.getSelectedObjects() == null) {
                mainWin.cmdPause.setEnabled(false);
                mainWin.cmdRun.setIcon(new ImageIcon(Config.iconPath
                        + "Run.png"));
                mainWin.cmdRun.setToolTipText("Run");
            } else {
                mainWin.cmdPause.setEnabled(true);
                mainWin.cmdRun.setIcon(new ImageIcon(Config.iconPath
                        + "Stop.png"));
                mainWin.cmdRun.setToolTipText("Stop");
            }
            this.toggleMode(Mode.SIMULATION_MODE);
        } else if (src.equals(mainWin.cmdPause)) {
            this.toggleMode(Mode.PAUSED_MODE);
        } else if (src.equals(mainWin.cmdSave)
                || src.equals(mainWin.saveMenuItem)) {
            // TODO
        } else if (src.equals(mainWin.cmdNew)
                || src.equals(mainWin.newMenuItem)) {
            mainWin.addNewClientSpace("ManagerUI");
            /*
             * mainWin.addNewClientSpace("New"+newCount++); ManagerUI
             * m=mainWin.clientSpace.get(mainWin.ClientArea.getSelectedIndex());
             */
        } else if (src.equals(mainWin.cmdOpen)
                || src.equals(mainWin.openMenuItem)) {
            // TODO
        } else if (src.equals(mainWin.copyMenuItem)) {
            // TODO
        } else if (src.equals(mainWin.cutMenuItem)) {
            // TODO
        } else if (src.equals(mainWin.pasteMenuItem)) {
            // TODO
        } else {
            for (int i = 0; i < mainWin.cmdComponents.length; i++)
                if (src.equals(mainWin.cmdComponents[i])) {
                    String selection = new String(
                            mainWin.ComponentModulePath[i]);
                    try {
                        // mainWin.clientSpace.get(mainWin.ClientArea.getSelectedIndex()).setSelectionName(selection);
                        mainWin.clientSpace.get(0).setSelectionName(selection);
                    } catch (java.lang.NullPointerException Ne) {
                        Ne.printStackTrace();
                        return;
                    }
                    break;
                }
        }
    }

    public void mouseClicked(java.awt.event.MouseEvent e) {

        /*
         * if(e.getSource()==mainWin.ClientArea
         * &&e.getButton()==MouseEvent.BUTTON1){ Mode mode; try{
         * mode=(mainWin.clientSpace
         * .get(mainWin.ClientArea.getSelectedIndex())).getMode(); }
         * catch(java.lang.NullPointerException Ne){ Ne.printStackTrace();
         * return; }
         * 
         * if(mode==Mode.SIMULATION_MODE){ mainWin.cmdRun.setSelected(true);
         * mainWin.cmdPause.setEnabled(true);
         * mainWin.cmdPause.setSelected(false); } else
         * if(mode==Mode.PAUSED_MODE){ mainWin.cmdRun.setSelected(true);
         * mainWin.cmdPause.setEnabled(true);
         * mainWin.cmdPause.setSelected(true); } else{
         * mainWin.cmdRun.setSelected(false);
         * mainWin.cmdPause.setEnabled(false);
         * mainWin.cmdPause.setSelected(false); } }
         */
    }

    /**
     * USED BY APPLICATION MANAGER TO TOGGLE MODE OF ManagerUI CAUSED BY
     * TOGGLING OF cmdRun AND cmdPause
     * 
     * @param toggleMode
     */
    public void toggleMode(Mode toggleMode) {
        ManagerUI m;

        try {
            // m
            // =mainWin.clientSpace.get(mainWin.ClientArea.getSelectedIndex());
            m = mainWin.clientSpace.get(0);
        } catch (java.lang.NullPointerException e) {
            e.printStackTrace();
            return;
        }

        if (toggleMode == Mode.SIMULATION_MODE
                && (m.getMode() == Mode.EDIT_MODE || m.getMode() == Mode.WIRE_CREATION_MODE))
            m.changeMode(Mode.SIMULATION_MODE);
        else if (toggleMode == Mode.SIMULATION_MODE
                && (m.getMode() == Mode.SIMULATION_MODE || m.getMode() == Mode.PAUSED_MODE))
            m.changeMode(Mode.EDIT_MODE);
        else if (toggleMode == Mode.PAUSED_MODE
                && m.getMode() == Mode.SIMULATION_MODE)
            m.changeMode(Mode.PAUSED_MODE);
        else if (toggleMode == Mode.PAUSED_MODE
                && m.getMode() == Mode.PAUSED_MODE)
            m.changeMode(Mode.SIMULATION_MODE);
    }

    public void componentHidden(ComponentEvent e) {
        // TODO Auto-generated method stub

    }

    public void componentMoved(ComponentEvent e) {
        // TODO Auto-generated method stub

    }

    public void componentResized(ComponentEvent e) {
        if (mainWin == null || mainWin.clientSpace == null
                || mainWin.clientSpace.size() == 0)
            return;
        int rwidth = mainWin.jScp.getViewport().getSize().width;
        int rheight = mainWin.jScp.getViewport().getSize().height;
        ManagerUI m = mainWin.clientSpace.get(0);
        int mwidth = m.getSize().width;
        int mheight = m.getSize().height;
        boolean flag = false;
        if (mwidth < rwidth) {
            mwidth = rwidth;
            flag = true;
        }
        if (mheight < rheight) {
            mheight = rheight;
            flag = true;
        }
        if (flag)
            m.Resize(mwidth, mheight);
        else
            m.ResizeToSmallestSize();
    }

    public void componentShown(ComponentEvent e) {
        // TODO Auto-generated method stub

    }
}
